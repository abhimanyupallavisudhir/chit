# Complex HTML and Markdown Examples

Here are some complex code blocks containing HTML, scripting, and mixed markdown/HTML to help you test your markdown renderer:

## 1. Complete HTML Document with DOCTYPE and Scripts

```html
<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Complex HTML Example</title>
    <style>
        body {
            font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif;
            line-height: 1.6;
            color: #333;
            max-width: 1200px;
            margin: 0 auto;
            padding: 20px;
        }
        .container {
            display: grid;
            grid-template-columns: repeat(auto-fill, minmax(300px, 1fr));
            gap: 20px;
        }
        .card {
            border: 1px solid #ddd;
            border-radius: 8px;
            padding: 20px;
            box-shadow: 0 4px 8px rgba(0,0,0,0.1);
            transition: transform 0.3s ease;
        }
        .card:hover {
            transform: translateY(-5px);
        }
        @media (max-width: 768px) {
            .container {
                grid-template-columns: 1fr;
            }
        }
    </style>
</head>
<body>
    <header>
        <h1>Complex HTML Test</h1>
        <nav>
            <ul>
                <li><a href="#section1">Section 1</a></li>
                <li><a href="#section2">Section 2</a></li>
                <li><a href="#section3">Section 3</a></li>
            </ul>
        </nav>
    </header>
    
    <main class="container">
        <section id="section1" class="card">
            <h2>Interactive Section</h2>
            <p>This section contains interactive elements:</p>
            <button id="toggleBtn">Toggle Content</button>
            <div id="toggleContent" style="display:none;">
                <p>This content can be toggled!</p>
                <ul>
                    <li>Item 1</li>
                    <li>Item 2</li>
                    <li>Item 3</li>
                </ul>
            </div>
        </section>
        
        <section id="section2" class="card">
            <h2>Form Elements</h2>
            <form id="testForm">
                <div>
                    <label for="name">Name:</label>
                    <input type="text" id="name" name="name" required>
                </div>
                <div>
                    <label for="email">Email:</label>
                    <input type="email" id="email" name="email" required>
                </div>
                <div>
                    <label for="message">Message:</label>
                    <textarea id="message" name="message" rows="4"></textarea>
                </div>
                <div>
                    <input type="checkbox" id="subscribe" name="subscribe">
                    <label for="subscribe">Subscribe to newsletter</label>
                </div>
                <button type="submit">Submit</button>
            </form>
        </section>
        
        <section id="section3" class="card">
            <h2>Dynamic Content</h2>
            <div id="dynamicContent">
                <p>Loading content...</p>
            </div>
        </section>
    </main>
    
    <footer>
        <p>&copy; 2023 Test Company. All rights reserved.</p>
    </footer>

    <script>
        // Toggle functionality
        document.getElementById('toggleBtn').addEventListener('click', function() {
            const content = document.getElementById('toggleContent');
            if (content.style.display === 'none') {
                content.style.display = 'block';
                this.textContent = 'Hide Content';
            } else {
                content.style.display = 'none';
                this.textContent = 'Toggle Content';
            }
        });
        
        // Form handling
        document.getElementById('testForm').addEventListener('submit', function(event) {
            event.preventDefault();
            const formData = new FormData(this);
            const formValues = {};
            
            formData.forEach((value, key) => {
                formValues[key] = value;
            });
            
            console.log('Form submitted:', formValues);
            alert('Form submitted successfully!');
        });
        
        // Dynamic content loading simulation
        setTimeout(function() {
            const dynamicContent = document.getElementById('dynamicContent');
            dynamicContent.innerHTML = `
                <h3>Content Loaded!</h3>
                <p>This content was loaded dynamically after a delay.</p>
                <div class="dynamic-data">
                    <p>Random number: ${Math.floor(Math.random() * 100)}</p>
                    <p>Current time: ${new Date().toLocaleTimeString()}</p>
                </div>
            `;
        }, 2000);
        
        // Complex data structures and operations
        const complexData = {
            users: [
                { id: 1, name: 'John Doe', role: 'admin', active: true },
                { id: 2, name: 'Jane Smith', role: 'editor', active: false },
                { id: 3, name: 'Bob Johnson', role: 'viewer', active: true }
            ],
            settings: {
                darkMode: window.matchMedia('(prefers-color-scheme: dark)').matches,
                fontSize: 16,
                notifications: {
                    email: true,
                    push: false,
                    frequency: 'daily'
                }
            }
        };
        
        // Apply some operations on the data
        const activeUsers = complexData.users.filter(user => user.active);
        console.log('Active users:', activeUsers);
        
        function processUserData(userData) {
            return userData.map(user => ({
                ...user,
                displayName: `${user.name} (${user.role})`,
                lastLogin: new Date().toISOString()
            }));
        }
        
        const processedUsers = processUserData(complexData.users);
        console.log('Processed users:', processedUsers);
    </script>
</body>
</html>
```

## 2. HTML with SVG and Canvas

```html
<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <title>SVG and Canvas Example</title>
</head>
<body>
    <h1>Advanced Graphics Example</h1>
    
    <!-- SVG Example -->
    <h2>SVG Graphic</h2>
    <svg width="300" height="200" viewBox="0 0 300 200">
        <defs>
            <linearGradient id="gradient" x1="0%" y1="0%" x2="100%" y2="0%">
                <stop offset="0%" stop-color="purple" />
                <stop offset="100%" stop-color="blue" />
            </linearGradient>
            <filter id="shadow" x="-20%" y="-20%" width="140%" height="140%">
                <feGaussianBlur in="SourceAlpha" stdDeviation="3" />
                <feOffset dx="2" dy="2" result="offsetblur" />
                <feComponentTransfer>
                    <feFuncA type="linear" slope="0.5" />
                </feComponentTransfer>
                <feMerge>
                    <feMergeNode />
                    <feMergeNode in="SourceGraphic" />
                </feMerge>
            </filter>
        </defs>
        
        <!-- Complex SVG elements -->
        <rect x="20" y="20" width="100" height="100" fill="url(#gradient)" filter="url(#shadow)" />
        <circle cx="220" cy="70" r="50" fill="#ff9900" stroke="#b36b00" stroke-width="2" filter="url(#shadow)" />
        <path d="M50,180 Q150,120 250,180" fill="none" stroke="red" stroke-width="3" />
        
        <text x="150" y="160" font-family="Arial" font-size="16" text-anchor="middle" fill="#333">
            SVG Text with <tspan fill="red">styled</tspan> elements
        </text>
        
        <g transform="translate(80, 40)">
            <polygon points="0,0 20,0 10,20" fill="green" />
        </g>
    </svg>
    
    <!-- Canvas Example -->
    <h2>Canvas Animation</h2>
    <canvas id="animationCanvas" width="300" height="200" style="border: 1px solid #ddd;"></canvas>
    
    <script>
        // Canvas animation
        const canvas = document.getElementById('animationCanvas');
        const ctx = canvas.getContext('2d');
        let particles = [];
        
        // Create particles
        for (let i = 0; i < 50; i++) {
            particles.push({
                x: Math.random() * canvas.width,
                y: Math.random() * canvas.height,
                radius: Math.random() * 4 + 1,
                color: `hsl(${Math.random() * 360}, 70%, 60%)`,
                vx: Math.random() * 2 - 1,
                vy: Math.random() * 2 - 1
            });
        }
        
        function animate() {
            ctx.clearRect(0, 0, canvas.width, canvas.height);
            
            // Draw and update particles
            particles.forEach(particle => {
                ctx.beginPath();
                ctx.arc(particle.x, particle.y, particle.radius, 0, Math.PI * 2);
                ctx.fillStyle = particle.color;
                ctx.fill();
                
                // Update position
                particle.x += particle.vx;
                particle.y += particle.vy;
                
                // Bounce off walls
                if (particle.x < 0 || particle.x > canvas.width) particle.vx *= -1;
                if (particle.y < 0 || particle.y > canvas.height) particle.vy *= -1;
            });
            
            // Draw connecting lines
            ctx.strokeStyle = 'rgba(100, 100, 100, 0.2)';
            ctx.lineWidth = 0.5;
            for (let i = 0; i < particles.length; i++) {
                for (let j = i + 1; j < particles.length; j++) {
                    const dx = particles[i].x - particles[j].x;
                    const dy = particles[i].y - particles[j].y;
                    const distance = Math.sqrt(dx * dx + dy * dy);
                    
                    if (distance < 70) {
                        ctx.beginPath();
                        ctx.moveTo(particles[i].x, particles[i].y);
                        ctx.lineTo(particles[j].x, particles[j].y);
                        ctx.stroke();
                    }
                }
            }
            
            requestAnimationFrame(animate);
        }
        
        animate();
    </script>
</body>
</html>
```

## 3. Mix of Markdown and HTML

```markdown
# Markdown and HTML Integration Demo

This is a regular markdown paragraph with **bold** and *italic* text.

<div style="background-color: #f0f0f0; padding: 15px; border-radius: 8px; margin: 20px 0;">
  <h2 style="color: #2c3e50;">HTML Section Inside Markdown</h2>
  <p>This entire block is HTML but inside a markdown code block.</p>
  <ul>
    <li>HTML list item 1</li>
    <li>HTML list item 2 with <strong>bold text</strong></li>
  </ul>
</div>

## Back to Markdown

1. First ordered item
2. Second ordered item
   - Unordered sub-item
   - Another sub-item

<table border="1" style="border-collapse: collapse; width: 100%;">
  <thead>
    <tr style="background-color: #eee;">
      <th>HTML Table Header 1</th>
      <th>HTML Table Header 2</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <td>Row 1, Cell 1</td>
      <td>
        <div style="color: blue;">
          <p>This is a <em>complex</em> cell with <strong>formatting</strong></p>
          <pre><code>const code = "inside HTML table";</code></pre>
        </div>
      </td>
    </tr>
    <tr>
      <td colspan="2" style="text-align: center;">Spanning cell with centered text</td>
    </tr>
  </tbody>
</table>

### More Markdown

Here's a code block in markdown:

```javascript
// This is JavaScript inside markdown code block inside mixed markdown
function example() {
  return {
    name: 'Mixed Content Example',
    format: 'Markdown + HTML'
  };
}
```

<div style="display: flex; justify-content: space-between; margin-top: 20px;">
  <div style="flex: 1; margin-right: 10px;">
    <h3>HTML Flex Column 1</h3>
    <p>This content is in a flex layout.</p>
    <blockquote style="border-left: 4px solid #ccc; padding-left: 15px; margin-left: 0;">
      HTML blockquote inside a flex column
    </blockquote>
  </div>
  <div style="flex: 1; margin-left: 10px; border: 1px dashed #999; padding: 15px;">
    <h3>HTML Flex Column 2</h3>
    <details>
      <summary>Click to expand</summary>
      <p>This is hidden content in an HTML details element.</p>
      <ol>
        <li>Nested ordered list</li>
        <li>Inside details element</li>
      </ol>
    </details>
  </div>
</div>

> This is a markdown blockquote
> 
> With multiple lines

<script>
  // This is a script tag inside markdown
  // Just to see how your renderer handles it
  document.addEventListener('DOMContentLoaded', () => {
    console.log('Mixed markdown document loaded!');
    
    // Create a dynamic element
    const dynamicElement = document.createElement('div');
    dynamicElement.textContent = 'This element was created by JavaScript';
    dynamicElement.style.backgroundColor = '#e0ffe0';
    dynamicElement.style.padding = '10px';
    dynamicElement.style.marginTop = '20px';
    
    // You might append it to the document in a real scenario
    // document.body.appendChild(dynamicElement);
  });
</script>
```

## 4. HTML with Nesting and Special Characters

```html
<!DOCTYPE html>
<html>
<head>
    <meta charset="UTF-8">
    <title>Special Characters & Nesting Test</title>
</head>
<body>
    <div class="wrapper">
        <h1>Special Characters & Entities Test</h1>
        
        <section>
            <h2>HTML Entities</h2>
            <p>Copyright symbol: &copy;</p>
            <p>Ampersand: &amp;</p>
            <p>Less than: &lt; Greater than: &gt;</p>
            <p>Non-breaking space: text&nbsp;with&nbsp;non-breaking&nbsp;spaces</p>
            <p>Quote entities: &ldquo;double quotes&rdquo; and &lsquo;single quotes&rsquo;</p>
            <p>Em dash: text&mdash;with dash</p>
            <p>Currency symbols: &euro; &pound; &yen; &cent;</p>
        </section>
        
        <section>
            <h2>Deeply Nested Elements</h2>
            <div class="level-1">
                <p>Level 1</p>
                <div class="level-2">
                    <p>Level 2</p>
                    <div class="level-3">
                        <p>Level 3</p>
                        <div class="level-4">
                            <p>Level 4</p>
                            <div class="level-5">
                                <p>Level 5 with <span><em><strong>deeply</strong> <u>nested</u></em> <code>elements</code></span></p>
                                <table>
                                    <tr>
                                        <td>
                                            <ul>
                                                <li>
                                                    <a href="#">
                                                        <span>Very <em>nested</em> <strong>link</strong></span>
                                                    </a>
                                                </li>
                                            </ul>
                                        </td>
                                    </tr>
                                </table>
                            </div>
                        </div>
                    </div>
                </div>
            </div>
        </section>
        
        <section>
            <h2>Script Tags with HTML Content</h2>
            <script type="text/template" id="template">
                <div class="template-content">
                    <h3>This is HTML inside a script tag</h3>
                    <p>Sometimes used for templates</p>
                    <ul>
                        <li>Item 1 with <strong>formatting</strong></li>
                        <li>Item 2 with <a href="#">links</a></li>
                    </ul>
                </div>
            </script>
            
            <script>
                // JavaScript with HTML strings and special characters
                const htmlString = `
                    <div class="generated">
                        <p>This won't render but tests escaping in JS strings</p>
                    </div>
                `;
                
                const specialChars = "Quotes: ' and \" and escapes: \\ \n \t";
                const regex = /^<([a-z]+)([^<]+)*(?:>(.*)<\/\1>|\s+\/>)$/;
            </script>
        </section>
        
        <section>
            <h2>Comments and Conditional Comments</h2>
            <!-- This is a regular HTML comment -->
            <!-- 
                This is a multi-line
                HTML comment with <tags> and &entities;
            -->
            
            <!--[if IE]>
                <p>This is a conditional comment for Internet Explorer</p>
            <![endif]-->
            
            <!--[if lt IE 9]>
                <script src="https://example.com/ie-polyfill.js"></script>
            <![endif]-->
        </section>
    </div>
</body>
</html>
```

These examples should give your markdown renderer a thorough workout! They include a variety of complex HTML structures, special characters, deep nesting, script tags, SVG, canvas, and mixed markdown/HTML content. Let me know if you need any more specific examples or modifications to these ones.