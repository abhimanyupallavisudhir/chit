```
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Complex HTML Example</title>
    <style>
        body {
            font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif;
            line-height: 1.6;
            color: #333;
            max-width: 1200px;
            margin: 0 auto;
            padding: 20px;
        }
        .container {
            display: grid;
            grid-template-columns: repeat(auto-fill, minmax(300px, 1fr));
            gap: 20px;
        }
        .card {
            border: 1px solid #ddd;
            border-radius: 8px;
            padding: 20px;
            box-shadow: 0 4px 8px rgba(0,0,0,0.1);
            transition: transform 0.3s ease;
        }
        .card:hover {
            transform: translateY(-5px);
        }
        @media (max-width: 768px) {
            .container {
                grid-template-columns: 1fr;
            }
        }
    </style>
</head>
<body>
    <header>
        <h1>Complex HTML Test</h1>
        <nav>
            <ul>
                <li><a href="#section1">Section 1</a></li>
                <li><a href="#section2">Section 2</a></li>
                <li><a href="#section3">Section 3</a></li>
            </ul>
        </nav>
    </header>
    
    <main class="container">
        <section id="section1" class="card">
            <h2>Interactive Section</h2>
            <p>This section contains interactive elements:</p>
            <button id="toggleBtn">Toggle Content</button>
            <div id="toggleContent" style="display:none;">
                <p>This content can be toggled!</p>
                <ul>
                    <li>Item 1</li>
                    <li>Item 2</li>
                    <li>Item 3</li>
                </ul>
            </div>
        </section>
        
        <section id="section2" class="card">
            <h2>Form Elements</h2>
            <form id="testForm">
                <div>
                    <label for="name">Name:</label>
                    <input type="text" id="name" name="name" required>
                </div>
                <div>
                    <label for="email">Email:</label>
                    <input type="email" id="email" name="email" required>
                </div>
                <div>
                    <label for="message">Message:</label>
                    <textarea id="message" name="message" rows="4"></textarea>
                </div>
                <div>
                    <input type="checkbox" id="subscribe" name="subscribe">
                    <label for="subscribe">Subscribe to newsletter</label>
                </div>
                <button type="submit">Submit</button>
            </form>
        </section>
        
        <section id="section3" class="card">
            <h2>Dynamic Content</h2>
            <div id="dynamicContent">
                <p>Loading content...</p>
            </div>
        </section>
    </main>
    
    <footer>
        <p>&copy; 2023 Test Company. All rights reserved.</p>
    </footer>

    <script>
        // Toggle functionality
        document.getElementById('toggleBtn').addEventListener('click', function() {
            const content = document.getElementById('toggleContent');
            if (content.style.display === 'none') {
                content.style.display = 'block';
                this.textContent = 'Hide Content';
            } else {
                content.style.display = 'none';
                this.textContent = 'Toggle Content';
            }
        });
        
        // Form handling
        document.getElementById('testForm').addEventListener('submit', function(event) {
            event.preventDefault();
            const formData = new FormData(this);
            const formValues = {};
            
            formData.forEach((value, key) => {
                formValues[key] = value;
            });
            
            console.log('Form submitted:', formValues);
            alert('Form submitted successfully!');
        });
        
        // Dynamic content loading simulation
        setTimeout(function() {
            const dynamicContent = document.getElementById('dynamicContent');
            dynamicContent.innerHTML = `
                <h3>Content Loaded!</h3>
                <p>This content was loaded dynamically after a delay.</p>
                <div class="dynamic-data">
                    <p>Random number: ${Math.floor(Math.random() * 100)}</p>
                    <p>Current time: ${new Date().toLocaleTimeString()}</p>
                </div>
            `;
        }, 2000);
        
        // Complex data structures and operations
        const complexData = {
            users: [
                { id: 1, name: 'John Doe', role: 'admin', active: true },
                { id: 2, name: 'Jane Smith', role: 'editor', active: false },
                { id: 3, name: 'Bob Johnson', role: 'viewer', active: true }
            ],
            settings: {
                darkMode: window.matchMedia('(prefers-color-scheme: dark)').matches,
                fontSize: 16,
                notifications: {
                    email: true,
                    push: false,
                    frequency: 'daily'
                }
            }
        };
        
        // Apply some operations on the data
        const activeUsers = complexData.users.filter(user => user.active);
        console.log('Active users:', activeUsers);
        
        function processUserData(userData) {
            return userData.map(user => ({
                ...user,
                displayName: `${user.name} (${user.role})`,
                lastLogin: new Date().toISOString()
            }));
        }
        
        const processedUsers = processUserData(complexData.users);
        console.log('Processed users:', processedUsers);
    </script>
</body>
</html>
```
